// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: loyalty.proto

package loyaltypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoyaltyCore_RegisterClient_FullMethodName = "/loyalty.LoyaltyCore/RegisterClient"
	LoyaltyCore_ViewPromo_FullMethodName      = "/loyalty.LoyaltyCore/ViewPromo"
	LoyaltyCore_ClickPromo_FullMethodName     = "/loyalty.LoyaltyCore/ClickPromo"
	LoyaltyCore_CommentPromo_FullMethodName   = "/loyalty.LoyaltyCore/CommentPromo"
	LoyaltyCore_ListComments_FullMethodName   = "/loyalty.LoyaltyCore/ListComments"
)

// LoyaltyCoreClient is the client API for LoyaltyCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyCoreClient interface {
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	ViewPromo(ctx context.Context, in *ViewPromoRequest, opts ...grpc.CallOption) (*ViewPromoResponse, error)
	ClickPromo(ctx context.Context, in *ClickPromoRequest, opts ...grpc.CallOption) (*ClickPromoResponse, error)
	CommentPromo(ctx context.Context, in *CommentPromoRequest, opts ...grpc.CallOption) (*CommentPromoResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}

type loyaltyCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyCoreClient(cc grpc.ClientConnInterface) LoyaltyCoreClient {
	return &loyaltyCoreClient{cc}
}

func (c *loyaltyCoreClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, LoyaltyCore_RegisterClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyCoreClient) ViewPromo(ctx context.Context, in *ViewPromoRequest, opts ...grpc.CallOption) (*ViewPromoResponse, error) {
	out := new(ViewPromoResponse)
	err := c.cc.Invoke(ctx, LoyaltyCore_ViewPromo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyCoreClient) ClickPromo(ctx context.Context, in *ClickPromoRequest, opts ...grpc.CallOption) (*ClickPromoResponse, error) {
	out := new(ClickPromoResponse)
	err := c.cc.Invoke(ctx, LoyaltyCore_ClickPromo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyCoreClient) CommentPromo(ctx context.Context, in *CommentPromoRequest, opts ...grpc.CallOption) (*CommentPromoResponse, error) {
	out := new(CommentPromoResponse)
	err := c.cc.Invoke(ctx, LoyaltyCore_CommentPromo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyCoreClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, LoyaltyCore_ListComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyCoreServer is the server API for LoyaltyCore service.
// All implementations must embed UnimplementedLoyaltyCoreServer
// for forward compatibility
type LoyaltyCoreServer interface {
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	ViewPromo(context.Context, *ViewPromoRequest) (*ViewPromoResponse, error)
	ClickPromo(context.Context, *ClickPromoRequest) (*ClickPromoResponse, error)
	CommentPromo(context.Context, *CommentPromoRequest) (*CommentPromoResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	mustEmbedUnimplementedLoyaltyCoreServer()
}

// UnimplementedLoyaltyCoreServer must be embedded to have forward compatible implementations.
type UnimplementedLoyaltyCoreServer struct {
}

func (UnimplementedLoyaltyCoreServer) RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedLoyaltyCoreServer) ViewPromo(context.Context, *ViewPromoRequest) (*ViewPromoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPromo not implemented")
}
func (UnimplementedLoyaltyCoreServer) ClickPromo(context.Context, *ClickPromoRequest) (*ClickPromoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickPromo not implemented")
}
func (UnimplementedLoyaltyCoreServer) CommentPromo(context.Context, *CommentPromoRequest) (*CommentPromoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPromo not implemented")
}
func (UnimplementedLoyaltyCoreServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedLoyaltyCoreServer) mustEmbedUnimplementedLoyaltyCoreServer() {}

// UnsafeLoyaltyCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyCoreServer will
// result in compilation errors.
type UnsafeLoyaltyCoreServer interface {
	mustEmbedUnimplementedLoyaltyCoreServer()
}

func RegisterLoyaltyCoreServer(s grpc.ServiceRegistrar, srv LoyaltyCoreServer) {
	s.RegisterService(&LoyaltyCore_ServiceDesc, srv)
}

func _LoyaltyCore_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyCoreServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyCore_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyCoreServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyCore_ViewPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyCoreServer).ViewPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyCore_ViewPromo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyCoreServer).ViewPromo(ctx, req.(*ViewPromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyCore_ClickPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickPromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyCoreServer).ClickPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyCore_ClickPromo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyCoreServer).ClickPromo(ctx, req.(*ClickPromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyCore_CommentPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPromoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyCoreServer).CommentPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyCore_CommentPromo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyCoreServer).CommentPromo(ctx, req.(*CommentPromoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyCore_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyCoreServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyCore_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyCoreServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoyaltyCore_ServiceDesc is the grpc.ServiceDesc for LoyaltyCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoyaltyCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loyalty.LoyaltyCore",
	HandlerType: (*LoyaltyCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _LoyaltyCore_RegisterClient_Handler,
		},
		{
			MethodName: "ViewPromo",
			Handler:    _LoyaltyCore_ViewPromo_Handler,
		},
		{
			MethodName: "ClickPromo",
			Handler:    _LoyaltyCore_ClickPromo_Handler,
		},
		{
			MethodName: "CommentPromo",
			Handler:    _LoyaltyCore_CommentPromo_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _LoyaltyCore_ListComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loyalty.proto",
}
