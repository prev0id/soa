// Code generated by ogen, DO NOT EDIT.

package api_desc

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ListCommentsParams is parameters of ListComments operation.
type ListCommentsParams struct {
	EntityID  string
	PageSize  OptInt32
	PageToken OptString
}

func unpackListCommentsParams(packed middleware.Parameters) (params ListCommentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "entity_id",
			In:   "path",
		}
		params.EntityID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "page_size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page_token",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageToken = v.(OptString)
		}
	}
	return params
}

func decodeListCommentsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListCommentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: entity_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entity_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EntityID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entity_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: page_size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page_size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page_size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page_token.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page_token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageToken.SetTo(paramsDotPageTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page_token",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
