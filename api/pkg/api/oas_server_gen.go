// Code generated by ogen, DO NOT EDIT.

package api_desc

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ClickPromo implements ClickPromo operation.
	//
	// Record a promo click.
	//
	// POST /promos/clicks
	ClickPromo(ctx context.Context, req *ClickPromoReq) (ClickPromoRes, error)
	// CommentPromo implements CommentPromo operation.
	//
	// Add a comment to a promo.
	//
	// POST /promos/comments
	CommentPromo(ctx context.Context, req *CommentPromoReq) (CommentPromoRes, error)
	// ListComments implements ListComments operation.
	//
	// List comments for a promo.
	//
	// GET /promos/{entity_id}/comments
	ListComments(ctx context.Context, params ListCommentsParams) (ListCommentsRes, error)
	// RegisterClient implements RegisterClient operation.
	//
	// Register a new client.
	//
	// POST /clients
	RegisterClient(ctx context.Context, req *RegisterClientReq) (RegisterClientRes, error)
	// ViewPromo implements ViewPromo operation.
	//
	// Record a promo view.
	//
	// POST /promos/views
	ViewPromo(ctx context.Context, req *ViewPromoReq) (ViewPromoRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
